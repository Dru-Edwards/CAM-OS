version: '3.8'

services:
  # Redis backend for context storage
  redis:
    image: redis:7-alpine
    container_name: cam-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cam-network

  # CAM-OS Kernel
  cam-kernel:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: cam-kernel
    ports:
      - "8080:8080"
    environment:
      - CAM_REDIS_ADDR=redis:6379
      - CAM_LOG_LEVEL=debug
      - CAM_METRICS_ENABLED=true
      - CAM_POST_QUANTUM=true
      - CAM_TLS_ENABLED=false
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/home/camuser/logs
      - ./test-data:/home/camuser/data
    networks:
      - cam-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: cam-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cam-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cam-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=camadmin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - cam-network

  # Test client for syscall testing
  test-client:
    build:
      context: .
      dockerfile: Dockerfile.test-client
    container_name: cam-test-client
    depends_on:
      cam-kernel:
        condition: service_healthy
    environment:
      - CAM_KERNEL_ADDR=cam-kernel:8080
    volumes:
      - ./test-results:/app/results
    networks:
      - cam-network
    profiles:
      - testing

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  cam-network:
    driver: bridge 