version: '3.8'

services:
  # CAM Protocol Application
  cam-app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.dev
    container_name: cam-arbitration-mesh-dev
    ports:
      - "8080:8080"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - CAM_LOG_LEVEL=debug
      - CAM_REDIS_URL=redis://redis:6379
      - CAM_DATABASE_URL=postgresql://cam_user:cam_password@postgres:5432/cam_db
      - CAM_JWT_SECRET=dev-secret-key-change-in-production
      - CAM_API_RATE_LIMIT=1000
    volumes:
      - ../../src:/app/src
      - ../../tests:/app/tests
      - ../../config:/app/config
      - cam-logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - cam-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: cam-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - cam-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: cam-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=cam_user
      - POSTGRES_PASSWORD=cam_password
      - POSTGRES_DB=cam_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../../scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cam-network
    restart: unless-stopped

  # Nginx for load balancing and SSL termination
  nginx:
    image: nginx:alpine
    container_name: cam-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - cam-logs:/var/log/nginx
    depends_on:
      - cam-app
    networks:
      - cam-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cam-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - cam-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cam-grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cam-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cam-jaeger-dev
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - cam-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  cam-logs:

networks:
  cam-network:
    driver: bridge
