# Google Cloud Platform Deployment Configuration
# Complete Arbitration Mesh - GCP Cloud Run + Cloud SQL + Memorystore
apiVersion: v1
kind: ConfigMap
metadata:
  name: gcp-deployment-config
data:
  project_id: "cam-arbitration-mesh"
  region: "us-central1"
  zone: "us-central1-a"
  
---
# Cloud Run Service Configuration
apiVersion: run.googleapis.com/v1
kind: Service
metadata:
  name: cam-arbitration-mesh
  namespace: default
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
    run.googleapis.com/cpu-throttling: "false"
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/maxScale: "100"
        autoscaling.knative.dev/minScale: "1"
        run.googleapis.com/cloudsql-instances: "cam-arbitration-mesh:us-central1:cam-postgres"
        run.googleapis.com/vpc-access-connector: "cam-vpc-connector"
        run.googleapis.com/vpc-access-egress: "private-ranges-only"
    spec:
      containerConcurrency: 80
      timeoutSeconds: 300
      serviceAccountName: cam-service-account@cam-arbitration-mesh.iam.gserviceaccount.com
      containers:
      - image: gcr.io/cam-arbitration-mesh/cam-arbitration-mesh:latest
        name: cam-mesh
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              key: database_url
              name: cam-secrets
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redis_url
              name: cam-secrets
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: jwt_secret
              name: cam-secrets
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              key: encryption_key
              name: cam-secrets
        - name: GOOGLE_CLOUD_PROJECT
          value: "cam-arbitration-mesh"
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/secrets/google/key.json"
        resources:
          limits:
            cpu: "2000m"
            memory: "4Gi"
          requests:
            cpu: "1000m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: google-cloud-key
          mountPath: /var/secrets/google
          readOnly: true
      volumes:
      - name: google-cloud-key
        secret:
          secretName: google-cloud-key
  traffic:
  - percent: 100
    latestRevision: true

---
# Cloud SQL Configuration (PostgreSQL)
apiVersion: sqladmin.cnrm.cloud.google.com/v1beta1
kind: SQLInstance
metadata:
  name: cam-postgres
  namespace: default
spec:
  databaseVersion: POSTGRES_14
  region: us-central1
  settings:
    tier: db-custom-2-7680
    diskSize: 100
    diskType: PD_SSD
    diskAutoresize: true
    diskAutoresizeLimit: 500
    availabilityType: REGIONAL
    backupConfiguration:
      enabled: true
      startTime: "03:00"
      pointInTimeRecoveryEnabled: true
      backupRetentionSettings:
        retainedBackups: 30
        retentionUnit: "COUNT"
    ipConfiguration:
      ipv4Enabled: false
      privateNetwork: projects/cam-arbitration-mesh/global/networks/cam-vpc
      requireSsl: true
    maintenanceWindow:
      day: 7
      hour: 3
      updateTrack: stable
    databaseFlags:
    - name: log_checkpoints
      value: "on"
    - name: log_connections
      value: "on"
    - name: log_disconnections
      value: "on"
    - name: log_lock_waits
      value: "on"
    - name: log_temp_files
      value: "0"
    - name: log_min_duration_statement
      value: "1000"
    - name: shared_preload_libraries
      value: "pg_stat_statements"
    - name: max_connections
      value: "200"
    - name: work_mem
      value: "16384"
    - name: effective_cache_size
      value: "1048576"

---
# Cloud SQL Database
apiVersion: sqladmin.cnrm.cloud.google.com/v1beta1
kind: SQLDatabase
metadata:
  name: cam-arbitration-db
  namespace: default
spec:
  charset: UTF8
  collation: en_US.UTF8
  instanceRef:
    name: cam-postgres

---
# Cloud SQL User
apiVersion: sqladmin.cnrm.cloud.google.com/v1beta1
kind: SQLUser
metadata:
  name: cam-app-user
  namespace: default
spec:
  instanceRef:
    name: cam-postgres
  password:
    valueFrom:
      secretKeyRef:
        name: cam-secrets
        key: postgres_password

---
# Memorystore Redis Instance
apiVersion: redis.cnrm.cloud.google.com/v1beta1
kind: RedisInstance
metadata:
  name: cam-redis
  namespace: default
spec:
  region: us-central1
  tier: STANDARD_HA
  memorySizeGb: 4
  redisVersion: REDIS_6_X
  displayName: "CAM Redis Cache"
  authorizedNetwork: projects/cam-arbitration-mesh/global/networks/cam-vpc
  connectMode: PRIVATE_SERVICE_ACCESS
  redisConfigs:
    maxmemory-policy: "allkeys-lru"
    notify-keyspace-events: "Ex"
    timeout: "300"
  maintenancePolicy:
    weeklyMaintenanceWindow:
    - day: SUNDAY
      startTime:
        hours: 3
        minutes: 0

---
# VPC Network
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeNetwork
metadata:
  name: cam-vpc
  namespace: default
spec:
  autoCreateSubnetworks: false
  description: "VPC network for CAM Arbitration Mesh"

---
# VPC Subnet
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeSubnetwork
metadata:
  name: cam-subnet
  namespace: default
spec:
  ipCidrRange: "10.0.0.0/24"
  networkRef:
    name: cam-vpc
  region: us-central1
  description: "Subnet for CAM services"
  privateIpGoogleAccess: true
  secondaryIpRange:
  - rangeName: "pods"
    ipCidrRange: "10.1.0.0/16"
  - rangeName: "services"
    ipCidrRange: "10.2.0.0/16"

---
# VPC Access Connector
apiVersion: vpcaccess.cnrm.cloud.google.com/v1beta1
kind: VPCAccessConnector
metadata:
  name: cam-vpc-connector
  namespace: default
spec:
  region: us-central1
  networkRef:
    name: cam-vpc
  ipCidrRange: "10.0.1.0/28"
  minThroughput: 200
  maxThroughput: 1000

---
# Cloud Load Balancer
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeGlobalAddress
metadata:
  name: cam-lb-ip
  namespace: default
spec:
  description: "Global IP for CAM load balancer"

---
# SSL Certificate
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeManagedSSLCertificate
metadata:
  name: cam-ssl-cert
  namespace: default
spec:
  description: "SSL certificate for CAM domain"
  managed:
    domains:
    - "api.cam-arbitration.com"
    - "cam-arbitration.com"

---
# Cloud Monitoring Workspace
apiVersion: monitoring.cnrm.cloud.google.com/v1beta1
kind: MonitoringNotificationChannel
metadata:
  name: cam-alerts-email
  namespace: default
spec:
  displayName: "CAM Alerts Email"
  type: "email"
  labels:
    email_address: "alerts@cam-arbitration.com"
  enabled: true

---
# Service Account for Cloud Run
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMServiceAccount
metadata:
  name: cam-service-account
  namespace: default
spec:
  displayName: "CAM Service Account"
  description: "Service account for CAM Cloud Run service"

---
# IAM Policy Binding for Service Account
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: cam-sa-cloudsql-client
  namespace: default
spec:
  member: serviceAccount:cam-service-account@cam-arbitration-mesh.iam.gserviceaccount.com
  role: roles/cloudsql.client
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/cam-arbitration-mesh

---
# Secret Manager Secret
apiVersion: secretmanager.cnrm.cloud.google.com/v1beta1
kind: SecretManagerSecret
metadata:
  name: cam-app-secrets
  namespace: default
spec:
  secretId: cam-app-secrets
  replication:
    automatic: true

---
# Cloud Build Trigger
apiVersion: cloudbuild.cnrm.cloud.google.com/v1beta1
kind: CloudBuildTrigger
metadata:
  name: cam-build-trigger
  namespace: default
spec:
  description: "Build trigger for CAM deployment"
  github:
    owner: "your-org"
    name: "Complete-Arbitration-Mesh-Final"
    push:
      branch: "^main$"
  build:
    steps:
    - name: 'gcr.io/cloud-builders/docker'
      args:
      - 'build'
      - '-t'
      - 'gcr.io/cam-arbitration-mesh/cam-arbitration-mesh:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/cam-arbitration-mesh/cam-arbitration-mesh:latest'
      - '.'
    - name: 'gcr.io/cloud-builders/docker'
      args:
      - 'push'
      - 'gcr.io/cam-arbitration-mesh/cam-arbitration-mesh:$COMMIT_SHA'
    - name: 'gcr.io/cloud-builders/docker'
      args:
      - 'push'
      - 'gcr.io/cam-arbitration-mesh/cam-arbitration-mesh:latest'
    - name: 'gcr.io/cloud-builders/gcloud'
      args:
      - 'run'
      - 'deploy'
      - 'cam-arbitration-mesh'
      - '--image=gcr.io/cam-arbitration-mesh/cam-arbitration-mesh:$COMMIT_SHA'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
    options:
      logging: CLOUD_LOGGING_ONLY
      substitution_option: ALLOW_LOOSE
