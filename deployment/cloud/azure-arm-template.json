{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Complete Arbitration Mesh (CAM) Protocol Infrastructure on Azure"
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "staging",
      "allowedValues": [
        "staging",
        "production"
      ],
      "metadata": {
        "description": "Deployment environment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1v2",
        "P2v2",
        "P3v2"
      ],
      "metadata": {
        "description": "App Service Plan SKU"
      }
    },
    "postgresqlSku": {
      "type": "string",
      "defaultValue": "GP_Gen5_2",
      "allowedValues": [
        "B_Gen5_1",
        "B_Gen5_2",
        "GP_Gen5_2",
        "GP_Gen5_4",
        "GP_Gen5_8",
        "MO_Gen5_2",
        "MO_Gen5_4"
      ],
      "metadata": {
        "description": "PostgreSQL server SKU"
      }
    },
    "redisCacheSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Redis Cache SKU"
      }
    },
    "redisCacheFamily": {
      "type": "string",
      "defaultValue": "C",
      "allowedValues": [
        "C",
        "P"
      ],
      "metadata": {
        "description": "Redis Cache family"
      }
    },
    "redisCacheCapacity": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "metadata": {
        "description": "Redis Cache capacity"
      }
    },
    "administratorLogin": {
      "type": "string",
      "defaultValue": "cam_admin",
      "metadata": {
        "description": "PostgreSQL administrator login"
      }
    },
    "administratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL administrator password"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat('cam-', parameters('environment'))]",
    "appServicePlanName": "[concat(variables('resourcePrefix'), '-asp')]",
    "webAppName": "[concat(variables('resourcePrefix'), '-app-', uniqueString(resourceGroup().id))]",
    "postgresqlServerName": "[concat(variables('resourcePrefix'), '-psql-', uniqueString(resourceGroup().id))]",
    "postgresqlDatabaseName": "cam_db",
    "redisCacheName": "[concat(variables('resourcePrefix'), '-redis-', uniqueString(resourceGroup().id))]",
    "keyVaultName": "[concat(variables('resourcePrefix'), '-kv-', uniqueString(resourceGroup().id))]",
    "applicationInsightsName": "[concat(variables('resourcePrefix'), '-ai')]",
    "logAnalyticsWorkspaceName": "[concat(variables('resourcePrefix'), '-law')]",
    "containerRegistryName": "[concat('camacr', parameters('environment'), uniqueString(resourceGroup().id))]",
    "storageAccountName": "[concat('camsa', parameters('environment'), uniqueString(resourceGroup().id))]",
    "virtualNetworkName": "[concat(variables('resourcePrefix'), '-vnet')]",
    "subnetName": "[concat(variables('resourcePrefix'), '-subnet')]",
    "networkSecurityGroupName": "[concat(variables('resourcePrefix'), '-nsg')]",
    "publicIpName": "[concat(variables('resourcePrefix'), '-pip')]",
    "loadBalancerName": "[concat(variables('resourcePrefix'), '-lb')]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-02-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTP",
            "properties": {
              "priority": 1000,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "80",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "AllowHTTPS",
            "properties": {
              "priority": 1001,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "443",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-06-01-preview",
      "name": "[variables('containerRegistryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-06-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2021-02-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get"
              ]
            }
          }
        ],
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-06-01-preview",
      "name": "[concat(variables('keyVaultName'), '/jwt-secret')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[base64(guid(resourceGroup().id, 'jwt-secret'))]"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers",
      "apiVersion": "2017-12-01",
      "name": "[variables('postgresqlServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('postgresqlSku')]",
        "tier": "GeneralPurpose",
        "family": "Gen5",
        "capacity": 2
      },
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "version": "11",
        "sslEnforcement": "Enabled",
        "minimalTlsVersion": "TLS1_2",
        "storageProfile": {
          "storageMB": 51200,
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled",
          "storageAutogrow": "Enabled"
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers/databases",
      "apiVersion": "2017-12-01",
      "name": "[concat(variables('postgresqlServerName'), '/', variables('postgresqlDatabaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('postgresqlServerName'))]"
      ],
      "properties": {
        "charset": "utf8",
        "collation": "en_US.utf8"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers/firewallRules",
      "apiVersion": "2017-12-01",
      "name": "[concat(variables('postgresqlServerName'), '/AllowAzureServices')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('postgresqlServerName'))]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      }
    },
    {
      "type": "Microsoft.Cache/Redis",
      "apiVersion": "2021-06-01",
      "name": "[variables('redisCacheName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "[parameters('redisCacheSku')]",
          "family": "[parameters('redisCacheFamily')]",
          "capacity": "[parameters('redisCacheCapacity')]"
        },
        "enableNonSslPort": false,
        "minimumTlsVersion": "1.2",
        "redisConfiguration": {
          "maxmemory-policy": "allkeys-lru"
        }
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('appServicePlanSku')]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "NODE|18-lts",
          "appSettings": [
            {
              "name": "NODE_ENV",
              "value": "[parameters('environment')]"
            },
            {
              "name": "CAM_DATABASE_URL",
              "value": "[concat('postgresql://', parameters('administratorLogin'), ':', parameters('administratorLoginPassword'), '@', reference(resourceId('Microsoft.DBforPostgreSQL/servers', variables('postgresqlServerName'))).fullyQualifiedDomainName, ':5432/', variables('postgresqlDatabaseName'), '?ssl=true')]"
            },
            {
              "name": "CAM_REDIS_URL",
              "value": "[concat('redis://', reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))).hostName, ':6380?abortConnect=false&ssl=true')]"
            },
            {
              "name": "CAM_JWT_SECRET",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'jwt-secret')).secretUri, ')')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
            },
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[concat('https://', reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))).loginServer)]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[variables('containerRegistryName')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2021-06-01-preview').passwords[0].value]"
            }
          ],
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "http20Enabled": true,
          "healthCheckPath": "/health"
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2021-02-01",
      "name": "[concat(variables('webAppName'), '/logs')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ],
      "properties": {
        "applicationLogs": {
          "fileSystem": {
            "level": "Information"
          }
        },
        "httpLogs": {
          "fileSystem": {
            "retentionInMb": 35,
            "enabled": true
          }
        },
        "detailedErrorMessages": {
          "enabled": true
        },
        "failedRequestsTracing": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2021-02-01",
      "name": "[variables('publicIpName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('webAppName')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-02-01",
      "name": "[variables('loadBalancerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "HTTPRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/BackendPool')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/HealthProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "HealthProbe",
            "properties": {
              "protocol": "Http",
              "port": 8080,
              "requestPath": "/health",
              "intervalInSeconds": 30,
              "numberOfProbes": 2
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "webAppUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('webAppName'))).defaultHostName)]"
    },
    "postgresqlServerName": {
      "type": "string",
      "value": "[variables('postgresqlServerName')]"
    },
    "redisCacheName": {
      "type": "string",
      "value": "[variables('redisCacheName')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[variables('containerRegistryName')]"
    },
    "applicationInsightsName": {
      "type": "string",
      "value": "[variables('applicationInsightsName')]"
    },
    "loadBalancerPublicIP": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).ipAddress]"
    }
  }
}
