# Production Environment Values
# Optimized for production deployment with high availability and security

replicaCount: 5

image:
  repository: cam/complete-arbitration-mesh
  tag: "v1.0.0"  # Use specific version in production
  pullPolicy: IfNotPresent

# Production resource allocation
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 1000m
    memory: 1Gi

# Production environment configuration
app:
  nodeEnv: production
  logLevel: warn
  environment: production

# Production CAM configuration
cam:
  meshId: "production-mesh"
  nodeType: "arbitrator"
  consensus:
    algorithm: "pbft"  # More robust for production
    threshold: 0.75
  arbitration:
    timeout: "60s"
    maxParticipants: 20
    minParticipants: 5

# Enable autoscaling for production
autoscaling:
  enabled: true
  minReplicas: 5
  maxReplicas: 20
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # Slower scale down
      percentPolicy: 10
      podsPolicy: 1
    scaleUp:
      stabilizationWindowSeconds: 60
      percentPolicy: 100
      podsPolicy: 5

# Enable VPA for production
verticalPodAutoscaler:
  enabled: true
  updateMode: "Auto"
  minAllowed:
    cpu: 500m
    memory: 512Mi
  maxAllowed:
    cpu: 4000m
    memory: 4Gi

# Production persistence with backup
persistence:
  enabled: true
  size: 100Gi
  storageClass: "fast-ssd"
  backup:
    enabled: true
    size: 500Gi
    storageClass: "backup-storage"

# Production ingress with TLS
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: cam.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: cam-tls
      hosts:
        - cam.yourdomain.com

# Enable comprehensive monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 15s
    scrapeTimeout: 10s
    labels:
      release: prometheus
  prometheusRule:
    enabled: true
    labels:
      release: prometheus

# Enable tracing in production
tracing:
  enabled: true
  samplingRate: 0.01  # Low sampling rate for performance
  jaeger:
    endpoint: "http://jaeger-collector.monitoring:14268/api/traces"

# Production security configuration
security:
  jwt:
    algorithm: "RS256"  # More secure for production
    secret: ""  # Use external secret management
    expiresIn: "1h"
  encryption:
    key: ""  # Use external secret management
  signing:
    key: ""  # Use external secret management
  rateLimit:
    windowMs: 60000
    max: 1000
  cors:
    enabled: true

# Enable TLS
tls:
  enabled: true
  # cert and key should be provided via external secret management

# Network policy for production security
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    ingressNamespace: "ingress-nginx"
    monitoringNamespace: "monitoring"
  egress:
    enabled: true

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Production database configuration
postgresql:
  enabled: true
  auth:
    username: cam
    password: ""  # Use external secret
    database: cam
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "fast-ssd"
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
  backup:
    enabled: true
    cronjob:
      schedule: "0 2 * * *"

# Production cache configuration
redis:
  enabled: true
  auth:
    password: ""  # Use external secret
  master:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 20Gi

# Enable backup jobs
backupCronJob:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

cleanupCronJob:
  enabled: true
  schedule: "0 3 * * 0"  # Weekly
  retentionDays: 90  # Longer retention for production

# Strict RBAC for production
rbac:
  create: true
  createCRDPermissions: false
  createNamespaceRole: true

# Production node selection and affinity
nodeSelector:
  node-type: "compute"

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - cam-chart
        topologyKey: kubernetes.io/hostname

tolerations:
  - key: "dedicated"
    operator: "Equal"
    value: "cam"
    effect: "NoSchedule"

# Production gRPC configuration
grpc:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/grpc-backend: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: grpc.yourdomain.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: grpc-tls
        hosts:
          - grpc.yourdomain.com

# Disable integrations by default in production (enable as needed)
integrations:
  openai:
    enabled: false
  anthropic:
    enabled: false
  google:
    enabled: false

# Production external services
external:
  webhook:
    enabled: true
    secret: ""  # Use external secret management
  smtp:
    enabled: true
    host: "smtp.yourdomain.com"
    port: 587
    username: ""  # Use external secret management
    password: ""  # Use external secret management

# Enable comprehensive testing
tests:
  enabled: true
  timeout: "600"  # Longer timeout for production tests

# Performance optimization for production
performance:
  cacheSize: "500MB"
  workerThreads: 8
  batchSize: 1000
  optimizationLevel: "maximum"

# Production agents configuration
agents:
  discovery:
    enabled: true
    interval: "60s"
  collaboration:
    mode: "competitive"
  maxConcurrent: 20
