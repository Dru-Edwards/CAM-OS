version: '3.8'

services:
  # CAM Protocol Core Service
  cam-core:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    image: cam-protocol/core:latest
    container_name: cam-core
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - PORT=8080
      - OPENAI_API_KEY=${OPENAI_API_KEY:-demo-key-replace-me}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-demo-key-replace-me}
    volumes:
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: cam-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: cam-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=cam_user
      - POSTGRES_PASSWORD=cam_password
      - POSTGRES_DB=cam_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cam_user -d cam_db"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Demo OpenAI-compatible API service (for testing without real API keys)
  mock-openai:
    image: ghcr.io/complete-arbitration-mesh/mock-openai:latest
    container_name: cam-mock-openai
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Demo Anthropic-compatible API service (for testing without real API keys)
  mock-anthropic:
    image: ghcr.io/complete-arbitration-mesh/mock-anthropic:latest
    container_name: cam-mock-anthropic
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: cam-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - cam-core

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.0.3
    container_name: cam-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
