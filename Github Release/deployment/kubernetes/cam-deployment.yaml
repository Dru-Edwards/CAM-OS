apiVersion: v1
kind: Namespace
metadata:
  name: cam-system
  labels:
    name: cam-system
    istio-injection: enabled
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cam-config
  namespace: cam-system
data:
  NODE_ENV: "production"
  CAM_LOG_LEVEL: "info"
  CAM_API_RATE_LIMIT: "10000"
  CAM_REDIS_URL: "redis://cam-redis-service:6379"
  CAM_DATABASE_URL: "postgresql://cam_user:password@cam-postgres-service:5432/cam_db"
---
apiVersion: v1
kind: Secret
metadata:
  name: cam-secrets
  namespace: cam-system
type: Opaque
data:
  CAM_JWT_SECRET: Y2FtLWp3dC1zZWNyZXQtY2hhbmdlLWluLXByb2R1Y3Rpb24= # base64 encoded
  CAM_DB_PASSWORD: Y2FtX3Bhc3N3b3Jk # base64 encoded "cam_password"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cam-arbitration-mesh
  namespace: cam-system
  labels:
    app: cam-arbitration-mesh
    version: v2.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cam-arbitration-mesh
  template:
    metadata:
      labels:
        app: cam-arbitration-mesh
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cam-service-account
      containers:
      - name: cam-arbitration-mesh
        image: ghcr.io/cam-protocol/complete-arbitration-mesh:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: cam-config
        - secretRef:
            name: cam-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
---
apiVersion: v1
kind: Service
metadata:
  name: cam-arbitration-mesh-service
  namespace: cam-system
  labels:
    app: cam-arbitration-mesh
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: cam-arbitration-mesh
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cam-service-account
  namespace: cam-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: cam-system
  name: cam-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cam-role-binding
  namespace: cam-system
subjects:
- kind: ServiceAccount
  name: cam-service-account
  namespace: cam-system
roleRef:
  kind: Role
  name: cam-role
  apiGroup: rbac.authorization.k8s.io
