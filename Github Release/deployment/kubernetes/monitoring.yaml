apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: cam-system
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'cam-production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # CAM Application metrics
      - job_name: 'cam-arbitration-mesh'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - cam-system
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)

      # Kubernetes cluster metrics
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true

      # Redis metrics
      - job_name: 'redis'
        static_configs:
        - targets: ['cam-redis-service:6379']

      # PostgreSQL metrics (if postgres_exporter is deployed)
      - job_name: 'postgres'
        static_configs:
        - targets: ['postgres-exporter:9187']

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: cam-system
data:
  cam-alerts.yml: |
    groups:
    - name: cam.rules
      rules:
      # High error rate
      - alert: CAMHighErrorRate
        expr: rate(cam_http_requests_total{status=~"5.."}[5m]) / rate(cam_http_requests_total[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "CAM high error rate detected"
          description: "CAM error rate is above 5% for more than 2 minutes"

      # High latency
      - alert: CAMHighLatency
        expr: histogram_quantile(0.95, rate(cam_http_request_duration_seconds_bucket[5m])) > 1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "CAM high latency detected"
          description: "CAM 95th percentile latency is above 1 second"

      # Memory usage
      - alert: CAMHighMemoryUsage
        expr: (process_resident_memory_bytes / process_virtual_memory_max_bytes) * 100 > 90
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "CAM high memory usage"
          description: "CAM memory usage is above 90%"

      # CPU usage
      - alert: CAMHighCPUUsage
        expr: rate(process_cpu_seconds_total[5m]) * 100 > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "CAM high CPU usage"
          description: "CAM CPU usage is above 80%"

      # Pod restart
      - alert: CAMPodRestarting
        expr: rate(kube_pod_container_status_restarts_total{namespace="cam-system"}[15m]) > 0
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: "CAM pod restarting"
          description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting"

      # Database connection
      - alert: CAMDatabaseDown
        expr: up{job="postgres"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "CAM database is down"
          description: "PostgreSQL database is not responding"

      # Redis connection
      - alert: CAMRedisDown
        expr: up{job="redis"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "CAM Redis is down"
          description: "Redis cache is not responding"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: cam-system
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-service-account
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: cam-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: cam-system
  labels:
    app: prometheus
spec:
  ports:
  - port: 9090
    targetPort: 9090
    name: prometheus
  selector:
    app: prometheus
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: cam-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cluster-role
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: cam-system
